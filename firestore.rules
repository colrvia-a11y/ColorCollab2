rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for admin checking
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
             (request.auth.token.get('admin', false) == true || 
              request.auth.token.get('isAdmin', false) == true ||
              // Fallback to Firestore-based admin check
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get('isAdmin', false) == true);
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Color Stories - Public read, Admin-only write
    match /colorStories/{storyId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can create/edit/delete
    }
    
    // App Configuration - Public read, Admin-only write
    match /appConfig/{configId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can modify config
    }
    
    // Paint data - Public read, Admin-only write
    match /paints/{paintId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can manage paint data
    }
    
    // Brand data - Public read, Admin-only write
    match /brands/{brandId} {
      allow read: if true; // Public read access
      allow write: if isAdmin(); // Only admins can manage brand data
    }
    
    // User palettes - Owner read/write
    match /userPalettes/{paletteId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // User profiles - Owner read/write, Admin can manage admin status
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      // Allow admins to toggle admin privileges
      allow update: if isAdmin() && 
                      request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isAdmin', 'updatedAt']);
    }
    
    // Favorite paints - Owner read/write
    match /favoritePaints/{favoriteId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // Copied paints - Owner read/write
    match /copiedPaints/{copiedId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // Visualizer documents - Owner read/write
    match /visualizerDocs/{docId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // Share links - Public read for shared content
    match /shareLinks/{linkId} {
      allow read: if true; // Public read for shared palettes
      allow write: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    // Analytics/metrics - Admin-only access
    match /analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Default deny for any other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}